name: Terraform Infrastructure Tests

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'terraform/**'
      - '.github/workflows/terraform-test.yml'
      - 'tests/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'terraform/**'
      - '.github/workflows/terraform-test.yml'
      - 'tests/**'
  workflow_dispatch:
    inputs:
      test_level:
        description: 'Test level to run'
        required: true
        default: 'unit'
        type: choice
        options:
          - unit
          - integration
          - e2e
          - all

env:
  TF_VERSION: "1.13.3"
  TERRAFORM_DOCS_VERSION: "0.20.0"
  TFLINT_VERSION: "v0.59.1"
  CHECKOV_VERSION: "3.2.471"

jobs:
  terraform-validate:
    name: 🔍 Terraform Validation
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform Format Check
        run: terraform fmt -check -recursive terraform/

      - name: Terraform Init (Basic Example)
        run: |
          cd terraform/examples/basic
          terraform init -backend=false

      - name: Terraform Validate (Basic Example)
        run: |
          cd terraform/examples/basic
          terraform validate

      - name: Terraform Init (Modules)
        run: |
          for module in terraform/modules/*/; do
            echo "Validating $module"
            cd "$module"
            terraform init -backend=false
            terraform validate
            cd - > /dev/null
          done

  terraform-lint:
    name: 🧹 Terraform Linting
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup TFLint
        uses: terraform-linters/setup-tflint@v4
        with:
          tflint_version: ${{ env.TFLINT_VERSION }}

      - name: Init TFLint
        run: tflint --init

      - name: Run TFLint
        run: |
          find terraform/ -name "*.tf" -type f -exec dirname {} \; | sort -u | while read dir; do
              echo "Linting $dir"
              tflint --chdir="$dir"
          done


  terraform-security:
    name: 🔒 Security Scanning
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.13'

      - name: Install Checkov
        run: pip install checkov==${{ env.CHECKOV_VERSION }}

      # CKV_GCP_30: "Ensure that instances are not configured to use the default service account."
      # CKV_GCP_35: "Enable connecting to serial ports' is not enabled for VM Instance."
      # CKV_GCP_36: "Ensure that IP forwarding is not enabled on Instances."
      - name: Run Checkov
        run: |
          mkdir -p reports
          checkov --framework terraform \
                  --directory terraform/ \
                  -o sarif \
                  --output-file-path reports/ \
                  --skip-check CKV_GCP_30,CKV_GCP_35,CKV_GCP_36 \
                  --soft-fail

      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: reports/results_sarif.sarif

  terraform-docs:
    name: 📚 Documentation Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup terraform-docs
        run: |
          wget -O terraform-docs.tar.gz "https://github.com/terraform-docs/terraform-docs/releases/download/v${{ env.TERRAFORM_DOCS_VERSION }}/terraform-docs-v${{ env.TERRAFORM_DOCS_VERSION }}-linux-amd64.tar.gz"
          tar -xzf terraform-docs.tar.gz
          chmod +x terraform-docs
          sudo mv terraform-docs /usr/local/bin/

      - name: Check Documentation
        run: |
          # Store initial state to compare only terraform module changes
          git stash push README.md || true

          for module in terraform/modules/*/; do
            echo "Checking docs for $module"
            terraform-docs markdown table --output-file README.md --output-mode inject "$module"
          done

          # Check if any terraform module documentation was modified
          terraform_changes=$(git diff --name-only | grep "^terraform/" || true)
          if [[ -n "$terraform_changes" ]]; then
            echo "❌ Terraform module documentation is out of date. Please run terraform-docs on modules and commit changes."
            echo "Modified files:"
            echo "$terraform_changes"
            git diff terraform/
            exit 1
          else
            echo "✅ Terraform module documentation is up to date."
          fi

          # Restore root README.md if it was modified
          git restore README.md || true

  unit-tests:
    name: 🧪 Unit Tests
    runs-on: ubuntu-latest
    if: github.event.inputs.test_level == 'unit' || github.event.inputs.test_level == 'all' || github.event_name != 'workflow_dispatch'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Install test dependencies
        run: |
          go mod init algalon-test
          go get github.com/gruntwork-io/terratest/modules/terraform@v0.46.7
          go get github.com/stretchr/testify/assert@v1.8.4

      - name: Run unit tests
        run: |
          cd tests/unit
          go test -v -timeout 30m

  integration-tests:
    name: 🔗 Integration Tests
    runs-on: ubuntu-latest
    if: github.event.inputs.test_level == 'integration' || github.event.inputs.test_level == 'all'
    needs: [terraform-validate, terraform-lint]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Setup Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Run integration tests
        env:
          TF_VAR_project_id: ${{ secrets.GCP_PROJECT_ID }}
          TF_VAR_region: ${{ secrets.GCP_REGION || 'us-central1' }}
        run: |
          cd tests/integration
          go test -v -timeout 60m

  e2e-tests:
    name: 🚀 End-to-End Tests
    runs-on: ubuntu-latest
    if: github.event.inputs.test_level == 'e2e' || github.event.inputs.test_level == 'all'
    needs: [terraform-validate, terraform-lint, terraform-security]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Setup Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Run E2E tests
        env:
          TF_VAR_project_id: ${{ secrets.GCP_PROJECT_ID }}
          TF_VAR_region: ${{ secrets.GCP_REGION || 'us-central1' }}
          TF_VAR_deployment_name: "algalon-e2e-${{ github.run_number }}"
        run: |
          cd tests/e2e
          go test -v -timeout 120m

  cost-estimation:
    name: 💰 Cost Estimation
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Setup Infracost
        uses: infracost/actions/setup@v2
        with:
          api-key: ${{ secrets.INFRACOST_API_KEY }}

      - name: Generate cost diff
        run: |
          cd terraform/examples/basic
          # Create a sample tfvars for cost estimation
          cat > terraform.tfvars <<EOF
          project_id = "sample-project"
          deployment_name = "algalon-cost-test"
          worker_count = 2
          gpu_type = "nvidia-tesla-t4"
          EOF

          infracost diff --path . \
                       --format json \
                       --out-file /tmp/infracost.json

      - name: Post cost comment
        uses: infracost/actions/comment@v1
        with:
          path: /tmp/infracost.json
          behavior: update

  # notify-slack:
  #   name: 📢 Slack Notification
  #   runs-on: ubuntu-latest
  #   needs: [terraform-validate, terraform-lint, terraform-security, unit-tests]
  #   if: always() && github.ref == 'refs/heads/main'

  #   steps:
  #     - name: Notify Slack on success
  #       if: needs.terraform-validate.result == 'success' && needs.terraform-lint.result == 'success' && needs.terraform-security.result == 'success' && needs.unit-tests.result == 'success'
  #       uses: 8398a7/action-slack@v3
  #       with:
  #         status: success
  #         text: "✅ Algalon Terraform tests passed successfully!"
  #       env:
  #         SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  #     - name: Notify Slack on failure
  #       if: needs.terraform-validate.result == 'failure' || needs.terraform-lint.result == 'failure' || needs.terraform-security.result == 'failure' || needs.unit-tests.result == 'failure'
  #       uses: 8398a7/action-slack@v3
  #       with:
  #         status: failure
  #         text: "❌ Algalon Terraform tests failed!"
  #       env:
  #         SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
  